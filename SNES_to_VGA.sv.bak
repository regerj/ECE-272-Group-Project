module fsm_snes (input clk,
					  input strobe,
					  input data,
					  output reg [11:0] button_states,
					  output finish,
					  output idle,
					  output snes_latch,
					  output snes_clk);

parameter idle = 10'b0101000001;
parameter s1 = 10'b1100000010;
parameter s2 = 10'b0100000100;
parameter s3 = 10'b0000001000;
parameter s4 = 10'b0100010000;
parameter s5 = 10'b0110100000;

reg [9:0] state = idle;
reg [9:0] delay = 10'd600;
reg [3:0] clks = 4'd0;
reg [14:0] button_states_temp = 15'd0;
wire prefinish = (state[9:0] == s4) ? 1'b1:0;
assign snes_latch = state[9];
assign snes_clk = state[8];
assign finish = state[7];
assign idle = state[6];

					
always @(posedge clk)
begin
	case(state[9:0])
	
	idle:
	begin
		state <= idle;
		delay <= 10'd600;
		clks <= 4'd0;
		if(start == 1)
			state <= s1;
	end
	
	s1:
	begin
		state <= s1;
		delay <= delay - 1'b1;
		clks <= 4'd1;
		if(delay == 10'd0)
		begin
			delay <= 10'd300;
			state <= s2;
		end
	end
	
	s2:
	begin
		state <= s2;
		delay <= delay - 1'b1;
		clks <= clks;
		if(delay == 10'd0)
		begin
			delay <= 10'd300;
			state <= s3;
		end
	end
	
	s3:
	begin
		state <= s3;
		dealy <= delay - 1'b1;
		clks <= clks;
		if(delay == 10'd0)
		begin
			clks <= clks + 1'b1;
			if(clks < 4'd15)
			begin
				delay <= 10'd300;
				state <= s2;
			end
			else
			begin
				delay <= 10'd600;
				state <= s4;
			end
		end
	end
	
	s4:
	begin
		state <= s4;
		delay <= delay - 1'b1;
		clks <= 4'd0;
		if(delay == 10'd0)
			state <= s5;
	end
	
	s5:
	begin
		state <= idle;
		delay <= 10'd0;
		clks <= 4'd0;
	end
	
	default:
	begin
		state <= idle;
		delay <= 10'd0;
		clks <= 4'd0;
	end
	endcase
end

always@(negedge snes_clk)
	button_state_temp <= {data, button_state_temp};

always@(posedge prefinish)
	button_states <= button_state_temp [11:0];
	